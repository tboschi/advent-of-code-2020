#! /bin/python

import sys

if len(sys.argv) < 1:
    print("Input file expected", file=sys.stderr)
    sys.exit(1)

class Memory(dict):
    def __init__(self):
        self.memory = dict()

    def set_mask(self, mask):
        self.base = int(mask.replace('X', '0'), 2)
        self.mask = int(mask.replace('0', '1').replace('X', '0'), 2)
        pos = [i for i, x in enumerate(mask[::-1]) if x == 'X']   # list of X positions
        self.float = []
        for n in range(1 << len(pos)):
            dec = 0
            for b, p in enumerate(pos):
                dec += (n & (1 << b)) << (p-b)
            self.float.append(dec)

    def __getitem__(self, key):
        return self.memory[key]

    def __setitem__(self, addr, value):
        for dec in self.float:
            key = dec + ((self.base | addr) & self.mask)
            self.memory[key] = value

    def __repr__(self):
        return self.memory.__repr__()

with open(sys.argv[1]) as infile:

    mem = Memory()
    for line in infile.readlines():
        #print(line.strip())
        if "mask" in line:
            key, _, val = line.partition('=')
            mem.set_mask(val.strip())
        else:
            exec(line)

    print("Result is", sum(list(mem.memory.values())))
